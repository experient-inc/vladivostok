var common_1 = require('@angular/common');
var core_1 = require('@angular/core');
var router_1 = require('./router');
var router_outlet_map_1 = require('./router_outlet_map');
var router_state_1 = require('./router_state');
var url_serializer_1 = require('./url_serializer');
exports.ROUTER_CONFIG = new core_1.OpaqueToken('ROUTER_CONFIG');
exports.ROUTER_OPTIONS = new core_1.OpaqueToken('ROUTER_OPTIONS');
function setupRouter(ref, resolver, urlSerializer, outletMap, location, injector, config, opts) {
    if (ref.componentTypes.length == 0) {
        throw new Error('Bootstrap at least one component before injecting Router.');
    }
    var componentType = ref.componentTypes[0];
    var r = new router_1.Router(componentType, resolver, urlSerializer, outletMap, location, injector, config);
    ref.registerDisposeListener(function () { return r.dispose(); });
    if (opts.enableTracing) {
        r.events.subscribe(function (e) {
            console.group("Router Event: " + e.constructor.name);
            console.log(e.toString());
            console.log(e);
            console.groupEnd();
        });
    }
    return r;
}
exports.setupRouter = setupRouter;
function setupRouterInitializer(injector) {
    setTimeout(function () {
        var appRef = injector.get(core_1.ApplicationRef);
        if (appRef.componentTypes.length == 0) {
            appRef.registerBootstrapListener(function () { injector.get(router_1.Router).initialNavigation(); });
        }
        else {
            injector.get(router_1.Router).initialNavigation();
        }
    }, 0);
    return function () { return null; };
}
exports.setupRouterInitializer = setupRouterInitializer;
function provideRouter(_config, _opts) {
    return [
        { provide: exports.ROUTER_CONFIG, useValue: _config }, { provide: exports.ROUTER_OPTIONS, useValue: _opts },
        common_1.Location, { provide: common_1.LocationStrategy, useClass: common_1.PathLocationStrategy },
        { provide: url_serializer_1.UrlSerializer, useClass: url_serializer_1.DefaultUrlSerializer },
        {
            provide: router_1.Router,
            useFactory: setupRouter,
            deps: [
                core_1.ApplicationRef, core_1.ComponentResolver, url_serializer_1.UrlSerializer, router_outlet_map_1.RouterOutletMap, common_1.Location, core_1.Injector,
                exports.ROUTER_CONFIG, exports.ROUTER_OPTIONS
            ]
        },
        router_outlet_map_1.RouterOutletMap,
        { provide: router_state_1.ActivatedRoute, useFactory: function (r) { return r.routerState.root; }, deps: [router_1.Router] },
        { provide: core_1.APP_INITIALIZER, multi: true, useFactory: setupRouterInitializer, deps: [core_1.Injector] }
    ];
}
exports.provideRouter = provideRouter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX3JvdXRlcl9wcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbW9uX3JvdXRlcl9wcm92aWRlcnMudHMiXSwibmFtZXMiOlsic2V0dXBSb3V0ZXIiLCJzZXR1cFJvdXRlckluaXRpYWxpemVyIiwicHJvdmlkZVJvdXRlciJdLCJtYXBwaW5ncyI6IkFBQUEsdUJBQStELGlCQUFpQixDQUFDLENBQUE7QUFDakYscUJBQXdGLGVBQWUsQ0FBQyxDQUFBO0FBR3hHLHVCQUFxQixVQUFVLENBQUMsQ0FBQTtBQUNoQyxrQ0FBOEIscUJBQXFCLENBQUMsQ0FBQTtBQUNwRCw2QkFBNkIsZ0JBQWdCLENBQUMsQ0FBQTtBQUM5QywrQkFBa0Qsa0JBQWtCLENBQUMsQ0FBQTtBQUV4RCxxQkFBYSxHQUFHLElBQUksa0JBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNqRCxzQkFBYyxHQUFHLElBQUksa0JBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBSWhFLHFCQUNJLEdBQW1CLEVBQUUsUUFBMkIsRUFBRSxhQUE0QixFQUM5RSxTQUEwQixFQUFFLFFBQWtCLEVBQUUsUUFBa0IsRUFBRSxNQUFvQixFQUN4RixJQUFrQjtJQUNwQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsTUFBTUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDbkNBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLDJEQUEyREEsQ0FBQ0EsQ0FBQ0E7SUFDL0VBLENBQUNBO0lBQ0RBLElBQU1BLGFBQWFBLEdBQUdBLEdBQUdBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBQzVDQSxJQUFNQSxDQUFDQSxHQUNIQSxJQUFJQSxlQUFNQSxDQUFDQSxhQUFhQSxFQUFFQSxRQUFRQSxFQUFFQSxhQUFhQSxFQUFFQSxTQUFTQSxFQUFFQSxRQUFRQSxFQUFFQSxRQUFRQSxFQUFFQSxNQUFNQSxD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LEVBQUNBLE9BQU9BLEVBQUVBLHNCQUFlQSxFQUFFQSxLQUFLQSxFQUFFQSxJQUFJQSxFQUFFQSxVQUFVQSxFQUFFQSxzQkFBc0JBLEVBQUVBLElBQUlBLEVBQUVBLENBQUNBLGVBQVFBLENBQUNBLEVBQUNBO0tBQzlGQSxDQUFDQTtBQUNKQSxDQUFDQTtBQXJCZSxxQkFBYSxnQkFxQjVCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xvY2F0aW9uLCBMb2NhdGlvblN0cmF0ZWd5LCBQYXRoTG9jYXRpb25TdHJhdGVneX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtBUFBfSU5JVElBTElaRVIsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZXNvbHZlciwgSW5qZWN0b3IsIE9wYXF1ZVRva2VufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7Um91dGVyQ29uZmlnfSBmcm9tICcuL2NvbmZpZyc7XHJcbmltcG9ydCB7Um91dGVyfSBmcm9tICcuL3JvdXRlcic7XHJcbmltcG9ydCB7Um91dGVyT3V0bGV0TWFwfSBmcm9tICcuL3JvdXRlcl9vdXRsZXRfbWFwJztcclxuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZX0gZnJvbSAnLi9yb3V0ZXJfc3RhdGUnO1xyXG5pbXBvcnQge0RlZmF1bHRVcmxTZXJpYWxpemVyLCBVcmxTZXJpYWxpemVyfSBmcm9tICcuL3VybF9zZXJpYWxpemVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBST1VURVJfQ09ORklHID0gbmV3IE9wYXF1ZVRva2VuKCdST1VURVJfQ09ORklHJyk7XHJcbmV4cG9ydCBjb25zdCBST1VURVJfT1BUSU9OUyA9IG5ldyBPcGFxdWVUb2tlbignUk9VVEVSX09QVElPTlMnKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXh0cmFPcHRpb25zIHsgZW5hYmxlVHJhY2luZz86IGJvb2xlYW47IH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFJvdXRlcihcclxuICAgIHJlZjogQXBwbGljYXRpb25SZWYsIHJlc29sdmVyOiBDb21wb25lbnRSZXNvbHZlciwgdXJsU2VyaWFsaXplcjogVXJsU2VyaWFsaXplcixcclxuICAgIG91dGxldE1hcDogUm91dGVyT3V0bGV0TWFwLCBsb2NhdGlvbjogTG9jYXRpb24sIGluamVjdG9yOiBJbmplY3RvciwgY29uZmlnOiBSb3V0ZXJDb25maWcsXHJcbiAgICBvcHRzOiBFeHRyYU9wdGlvbnMpIHtcclxuICBpZiAocmVmLmNvbXBvbmVudFR5cGVzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcCBhdCBsZWFzdCBvbmUgY29tcG9uZW50IGJlZm9yZSBpbmplY3RpbmcgUm91dGVyLicpO1xyXG4gIH1cclxuICBjb25zdCBjb21wb25lbnRUeXBlID0gcmVmLmNvbXBvbmVudFR5cGVzWzBdO1xyXG4gIGNvbnN0IHIgPVxyXG4gICAgICBuZXcgUm91dGVyKGNvbXBvbmVudFR5cGUsIHJlc29sdmVyLCB1cmxTZXJpYWxpemVyLCBvdXRsZXRNYXAsIGxvY2F0aW9uLCBpbmplY3RvciwgY29uZmlnKTtcclxuICByZWYucmVnaXN0ZXJEaXNwb3NlTGlzdGVuZXIoKCkgPT4gci5kaXNwb3NlKCkpO1xyXG5cclxuICBpZiAob3B0cy5lbmFibGVUcmFjaW5nKSB7XHJcbiAgICByLmV2ZW50cy5zdWJzY3JpYmUoZSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZ3JvdXAoYFJvdXRlciBFdmVudDogJHsoPGFueT5lLmNvbnN0cnVjdG9yKS5uYW1lfWApO1xyXG4gICAgICBjb25zb2xlLmxvZyhlLnRvU3RyaW5nKCkpO1xyXG4gICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwUm91dGVySW5pdGlhbGl6ZXIoaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvOTEwMVxyXG4gIC8vIERlbGF5IHRoZSByb3V0ZXIgaW5zdGFudGlhdGlvbiB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5IChBcHBsaWNhdGlvblJlZiAtPlxyXG4gIC8vIEFQUF9JTklUSUFMSVpFUiAtPiBSb3V0ZXIpXHJcbiAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICBjb25zdCBhcHBSZWYgPSBpbmplY3Rvci5nZXQoQXBwbGljYXRpb25SZWYpO1xyXG4gICAgaWYgKGFwcFJlZi5jb21wb25lbnRUeXBlcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICBhcHBSZWYucmVnaXN0ZXJCb290c3RyYXBMaXN0ZW5lcigoKSA9PiB7IGluamVjdG9yLmdldChSb3V0ZXIpLmluaXRpYWxOYXZpZ2F0aW9uKCk7IH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaW5qZWN0b3IuZ2V0KFJvdXRlcikuaW5pdGlhbE5hdmlnYXRpb24oKTtcclxuICAgIH1cclxuICB9LCAwKTtcclxuICByZXR1cm4gKCk6IGFueSA9PiBudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogQSBsaXN0IG9mIHtAbGluayBQcm92aWRlcn1zLiBUbyB1c2UgdGhlIHJvdXRlciwgeW91IG11c3QgYWRkIHRoaXMgdG8geW91ciBhcHBsaWNhdGlvbi5cclxuICpcclxuICogIyMjIEV4YW1wbGVcclxuICpcclxuICogYGBgXHJcbiAqIEBDb21wb25lbnQoe2RpcmVjdGl2ZXM6IFtST1VURVJfRElSRUNUSVZFU119KVxyXG4gKiBjbGFzcyBBcHBDbXAge1xyXG4gKiAgIC8vIC4uLlxyXG4gKiB9XHJcbiAqXHJcbiAqIGNvbnN0IHJvdXRlciA9IFtcclxuICogICB7cGF0aDogJy9ob21lJywgY29tcG9uZW50OiBIb21lfVxyXG4gKiBdO1xyXG4gKlxyXG4gKiBib290c3RyYXAoQXBwQ21wLCBbcHJvdmlkZVJvdXRlcihyb3V0ZXIpXSk7XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVSb3V0ZXIoX2NvbmZpZzogUm91dGVyQ29uZmlnLCBfb3B0czogRXh0cmFPcHRpb25zKTogYW55W10ge1xyXG4gIHJldHVybiBbXHJcbiAgICB7cHJvdmlkZTogUk9VVEVSX0NPTkZJRywgdXNlVmFsdWU6IF9jb25maWd9LCB7cHJvdmlkZTogUk9VVEVSX09QVElPTlMsIHVzZVZhbHVlOiBfb3B0c30sXHJcbiAgICBMb2NhdGlvbiwge3Byb3ZpZGU6IExvY2F0aW9uU3RyYXRlZ3ksIHVzZUNsYXNzOiBQYXRoTG9jYXRpb25TdHJhdGVneX0sXHJcbiAgICB7cHJvdmlkZTogVXJsU2VyaWFsaXplciwgdXNlQ2xhc3M6IERlZmF1bHRVcmxTZXJpYWxpemVyfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IFJvdXRlcixcclxuICAgICAgdXNlRmFjdG9yeTogc2V0dXBSb3V0ZXIsXHJcbiAgICAgIGRlcHM6IFtcclxuICAgICAgICBBcHBsaWNhdGlvblJlZiwgQ29tcG9uZW50UmVzb2x2ZXIsIFVybFNlcmlhbGl6ZXIsIFJvdXRlck91dGxldE1hcCwgTG9jYXRpb24sIEluamVjdG9yLFxyXG4gICAgICAgIFJPVVRFUl9DT05GSUcsIFJPVVRFUl9PUFRJT05TXHJcbiAgICAgIF1cclxuICAgIH0sXHJcblxyXG4gICAgUm91dGVyT3V0bGV0TWFwLFxyXG4gICAge3Byb3ZpZGU6IEFjdGl2YXRlZFJvdXRlLCB1c2VGYWN0b3J5OiAocjogUm91dGVyKSA9PiByLnJvdXRlclN0YXRlLnJvb3QsIGRlcHM6IFtSb3V0ZXJdfSxcclxuXHJcbiAgICAvLyBUcmlnZ2VyIGluaXRpYWwgbmF2aWdhdGlvblxyXG4gICAge3Byb3ZpZGU6IEFQUF9JTklUSUFMSVpFUiwgbXVsdGk6IHRydWUsIHVzZUZhY3Rvcnk6IHNldHVwUm91dGVySW5pdGlhbGl6ZXIsIGRlcHM6IFtJbmplY3Rvcl19XHJcbiAgXTtcclxufVxyXG4iXX0=