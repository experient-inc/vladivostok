var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BehaviorSubject_1 = require('rxjs/BehaviorSubject');
var shared_1 = require('./shared');
var url_tree_1 = require('./url_tree');
var collection_1 = require('./utils/collection');
var tree_1 = require('./utils/tree');
var RouterState = (function (_super) {
    __extends(RouterState, _super);
    function RouterState(root, queryParams, fragment, snapshot) {
        _super.call(this, root);
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.snapshot = snapshot;
    }
    RouterState.prototype.toString = function () { return this.snapshot.toString(); };
    return RouterState;
})(tree_1.Tree);
exports.RouterState = RouterState;
function createEmptyState(urlTree, rootComponent) {
    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
    var emptyUrl = new BehaviorSubject_1.BehaviorSubject([new url_tree_1.UrlPathWithParams('', {})]);
    var emptyParams = new BehaviorSubject_1.BehaviorSubject({});
    var emptyQueryParams = new BehaviorSubject_1.BehaviorSubject({});
    var fragment = new BehaviorSubject_1.BehaviorSubject('');
    var activated = new ActivatedRoute(emptyUrl, emptyParams, shared_1.PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new tree_1.TreeNode(activated, []), emptyQueryParams, fragment, snapshot);
}
exports.createEmptyState = createEmptyState;
function createEmptyStateSnapshot(urlTree, rootComponent) {
    var emptyParams = {};
    var emptyQueryParams = {};
    var fragment = '';
    var activated = new ActivatedRouteSnapshot([], emptyParams, shared_1.PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1);
    return new RouterStateSnapshot('', new tree_1.TreeNode(activated, []), emptyQueryParams, fragment);
}
var ActivatedRoute = (function () {
    function ActivatedRoute(url, params, outlet, component, futureSnapshot) {
        this.url = url;
        this.params = params;
        this.outlet = outlet;
        this.component = component;
        this._futureSnapshot = futureSnapshot;
    }
    ActivatedRoute.prototype.toString = function () {
        return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
    };
    return ActivatedRoute;
})();
exports.ActivatedRoute = ActivatedRoute;
var ActivatedRouteSnapshot = (function () {
    function ActivatedRouteSnapshot(url, params, outlet, component, routeConfig, urlSegment, lastPathIndex) {
        this.url = url;
        this.params = params;
        this.outlet = outlet;
        this.component = component;
        this._routeConfig = routeConfig;
        this._urlSegment = urlSegment;
        this._lastPathIndex = lastPathIndex;
    }
    ActivatedRouteSnapshot.prototype.toString = function () {
        var url = this.url.map(function (s) { return s.toString(); }).join('/');
        var matched = this._routeConfig ? this._routeConfig.path : '';
        return "Route(url:'" + url + "', path:'" + matched + "')";
    };
    return ActivatedRouteSnapshot;
})();
exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
var RouterStateSnapshot = (function (_super) {
    __extends(RouterStateSnapshot, _super);
    function RouterStateSnapshot(url, root, queryParams, fragment) {
        _super.call(this, root);
        this.url = url;
        this.queryParams = queryParams;
        this.fragment = fragment;
    }
    RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };
    return RouterStateSnapshot;
})(tree_1.Tree);
exports.RouterStateSnapshot = RouterStateSnapshot;
function serializeNode(node) {
    var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
    return "" + node.value + c;
}
function advanceActivatedRoute(route) {
    if (route.snapshot && !collection_1.shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
        route.snapshot = route._futureSnapshot;
        route.url.next(route.snapshot.url);
        route.params.next(route.snapshot.params);
    }
    else {
        route.snapshot = route._futureSnapshot;
    }
}
exports.advanceActivatedRoute = advanceActivatedRoute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyX3N0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlcl9zdGF0ZS50cyJdLCJuYW1lcyI6WyJSb3V0ZXJTdGF0ZSIsIlJvdXRlclN0YXRlLmNvbnN0cnVjdG9yIiwiUm91dGVyU3RhdGUudG9TdHJpbmciLCJjcmVhdGVFbXB0eVN0YXRlIiwiY3JlYXRlRW1wdHlTdGF0ZVNuYXBzaG90IiwiQWN0aXZhdGVkUm91dGUiLCJBY3RpdmF0ZWRSb3V0ZS5jb25zdHJ1Y3RvciIsIkFjdGl2YXRlZFJvdXRlLnRvU3RyaW5nIiwiQWN0aXZhdGVkUm91dGVTbmFwc2hvdCIsIkFjdGl2YXRlZFJvdXRlU25hcHNob3QuY29uc3RydWN0b3IiLCJBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LnRvU3RyaW5nIiwiUm91dGVyU3RhdGVTbmFwc2hvdCIsIlJvdXRlclN0YXRlU25hcHNob3QuY29uc3RydWN0b3IiLCJSb3V0ZXJTdGF0ZVNuYXBzaG90LnRvU3RyaW5nIiwic2VyaWFsaXplTm9kZSIsImFkdmFuY2VBY3RpdmF0ZWRSb3V0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxnQ0FBOEIsc0JBQXNCLENBQUMsQ0FBQTtBQUlyRCx1QkFBcUMsVUFBVSxDQUFDLENBQUE7QUFDaEQseUJBQXFELFlBQVksQ0FBQyxDQUFBO0FBQ2xFLDJCQUEyQixvQkFBb0IsQ0FBQyxDQUFBO0FBQ2hELHFCQUE2QixjQUFjLENBQUMsQ0FBQTtBQWtCNUM7SUFBaUNBLCtCQUFvQkE7SUFJbkRBLHFCQUNJQSxJQUE4QkEsRUFBU0EsV0FBK0JBLEVBQy9EQSxRQUE0QkEsRUFBU0EsUUFBNkJBO1FBQzNFQyxrQkFBTUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFGNkJBLGdCQUFXQSxHQUFYQSxXQUFXQSxDQUFvQkE7UUFDL0RBLGFBQVFBLEdBQVJBLFFBQVFBLENBQW9CQTtRQUFTQSxhQUFRQSxHQUFSQSxRQUFRQSxDQUFxQkE7SUFFN0VBLENBQUNBO0lBRURELDhC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Q0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDbERBLENBQUNBO0lBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ05BLEtBQUtBLENBQUNBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBLGVBQWVBLENBQUNBO0lBQ3pDQSxDQUFDQTtBQUNIQSxDQUFDQTtBQVJlLDZCQUFxQix3QkFRcEMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50RmFjdG9yeSwgVHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzL0JlaGF2aW9yU3ViamVjdCc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuXHJcbmltcG9ydCB7Um91dGV9IGZyb20gJy4vY29uZmlnJztcclxuaW1wb3J0IHtQUklNQVJZX09VVExFVCwgUGFyYW1zfSBmcm9tICcuL3NoYXJlZCc7XHJcbmltcG9ydCB7VXJsUGF0aFdpdGhQYXJhbXMsIFVybFNlZ21lbnQsIFVybFRyZWV9IGZyb20gJy4vdXJsX3RyZWUnO1xyXG5pbXBvcnQge3NoYWxsb3dFcXVhbH0gZnJvbSAnLi91dGlscy9jb2xsZWN0aW9uJztcclxuaW1wb3J0IHtUcmVlLCBUcmVlTm9kZX0gZnJvbSAnLi91dGlscy90cmVlJztcclxuXHJcblxyXG4vKipcclxuICogVGhlIHN0YXRlIG9mIHRoZSByb3V0ZXIuXHJcbiAqXHJcbiAqICMjIyBVc2FnZVxyXG4gKlxyXG4gKiBgYGBcclxuICogY2xhc3MgTXlDb21wb25lbnQge1xyXG4gKiAgIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyKSB7XHJcbiAqICAgICBjb25zdCBzdGF0ZSA9IHJvdXRlci5yb3V0ZXJTdGF0ZTtcclxuICogICAgIGNvbnN0IGlkOiBPYnNlcnZhYmxlPHN0cmluZz4gPSBzdGF0ZS5maXJzdENoaWxkKHN0YXRlLnJvb3QpLnBhcmFtcy5tYXAocCA9PiBwLmlkKTtcclxuICogICAgIGNvbnN0IGlzRGVidWc6IE9ic2VydmFibGU8c3RyaW5nPiA9IHN0YXRlLnF1ZXJ5UGFyYW1zLm1hcChxID0+IHEuZGVidWcpO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJTdGF0ZSBleHRlbmRzIFRyZWU8QWN0aXZhdGVkUm91dGU+IHtcclxuICAvKipcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgICAgcm9vdDogVHJlZU5vZGU8QWN0aXZhdGVkUm91dGU+LCBwdWJsaWMgcXVlcnlQYXJhbXM6IE9ic2VydmFibGU8UGFyYW1zPixcclxuICAgICAgcHVibGljIGZyYWdtZW50OiBPYnNlcnZhYmxlPHN0cmluZz4sIHB1YmxpYyBzbmFwc2hvdDogUm91dGVyU3RhdGVTbmFwc2hvdCkge1xyXG4gICAgc3VwZXIocm9vdCk7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5zbmFwc2hvdC50b1N0cmluZygpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbXB0eVN0YXRlKHVybFRyZWU6IFVybFRyZWUsIHJvb3RDb21wb25lbnQ6IFR5cGUpOiBSb3V0ZXJTdGF0ZSB7XHJcbiAgY29uc3Qgc25hcHNob3QgPSBjcmVhdGVFbXB0eVN0YXRlU25hcHNob3QodXJsVHJlZSwgcm9vdENvbXBvbmVudCk7XHJcbiAgY29uc3QgZW1wdHlVcmwgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KFtuZXcgVXJsUGF0aFdpdGhQYXJhbXMoJycsIHt9KV0pO1xyXG4gIGNvbnN0IGVtcHR5UGFyYW1zID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7fSk7XHJcbiAgY29uc3QgZW1wdHlRdWVyeVBhcmFtcyA9IG5ldyBCZWhhdmlvclN1YmplY3Qoe30pO1xyXG4gIGNvbnN0IGZyYWdtZW50ID0gbmV3IEJlaGF2aW9yU3ViamVjdCgnJyk7XHJcbiAgY29uc3QgYWN0aXZhdGVkID1cclxuICAgICAgbmV3IEFjdGl2YXRlZFJvdXRlKGVtcHR5VXJsLCBlbXB0eVBhcmFtcywgUFJJTUFSWV9PVVRMRVQsIHJvb3RDb21wb25lbnQsIHNuYXBzaG90LnJvb3QpO1xyXG4gIGFjdGl2YXRlZC5zbmFwc2hvdCA9IHNuYXBzaG90LnJvb3Q7XHJcbiAgcmV0dXJuIG5ldyBSb3V0ZXJTdGF0ZShcclxuICAgICAgbmV3IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlPihhY3RpdmF0ZWQsIFtdKSwgZW1wdHlRdWVyeVBhcmFtcywgZnJhZ21lbnQsIHNuYXBzaG90KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRW1wdHlTdGF0ZVNuYXBzaG90KHVybFRyZWU6IFVybFRyZWUsIHJvb3RDb21wb25lbnQ6IFR5cGUpOiBSb3V0ZXJTdGF0ZVNuYXBzaG90IHtcclxuICBjb25zdCBlbXB0eVBhcmFtcyA9IHt9O1xyXG4gIGNvbnN0IGVtcHR5UXVlcnlQYXJhbXMgPSB7fTtcclxuICBjb25zdCBmcmFnbWVudCA9ICcnO1xyXG4gIGNvbnN0IGFjdGl2YXRlZCA9IG5ldyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KFxyXG4gICAgICBbXSwgZW1wdHlQYXJhbXMsIFBSSU1BUllfT1VUTEVULCByb290Q29tcG9uZW50LCBudWxsLCB1cmxUcmVlLnJvb3QsIC0xKTtcclxuICByZXR1cm4gbmV3IFJvdXRlclN0YXRlU25hcHNob3QoXHJcbiAgICAgICcnLCBuZXcgVHJlZU5vZGU8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD4oYWN0aXZhdGVkLCBbXSksIGVtcHR5UXVlcnlQYXJhbXMsIGZyYWdtZW50KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBhYm91dCBhIGNvbXBvbmVudCBsb2FkZWQgaW4gYW4gb3V0bGV0LiBUaGUgaW5mb3JtYXRpb24gaXMgcHJvdmlkZWRcclxuICogdGhyb3VnaFxyXG4gKiB0aGUgcGFyYW1zIGFuZCB1cmxTZWdtZW50cyBvYnNlcnZhYmxlcy5cclxuICpcclxuICogIyMjIFVzYWdlXHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBjbGFzcyBNeUNvbXBvbmVudCB7XHJcbiAqICAgY29uc3RydWN0b3Iocm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7XHJcbiAqICAgICBjb25zdCBpZDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gcm91dGUucGFyYW1zLm1hcChwID0+IHAuaWQpO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBY3RpdmF0ZWRSb3V0ZSB7XHJcbiAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gIF9mdXR1cmVTbmFwc2hvdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcclxuICBzbmFwc2hvdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdDtcclxuXHJcbiAgLyoqXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICAgIHB1YmxpYyB1cmw6IE9ic2VydmFibGU8VXJsUGF0aFdpdGhQYXJhbXNbXT4sIHB1YmxpYyBwYXJhbXM6IE9ic2VydmFibGU8UGFyYW1zPixcclxuICAgICAgcHVibGljIG91dGxldDogc3RyaW5nLCBwdWJsaWMgY29tcG9uZW50OiBUeXBlfHN0cmluZyxcclxuICAgICAgZnV0dXJlU25hcHNob3Q6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpIHtcclxuICAgIHRoaXMuX2Z1dHVyZVNuYXBzaG90ID0gZnV0dXJlU25hcHNob3Q7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuc25hcHNob3QgPyB0aGlzLnNuYXBzaG90LnRvU3RyaW5nKCkgOiBgRnV0dXJlKCR7dGhpcy5fZnV0dXJlU25hcHNob3R9KWA7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ29udGFpbnMgdGhlIGluZm9ybWF0aW9uIGFib3V0IGEgY29tcG9uZW50IGxvYWRlZCBpbiBhbiBvdXRsZXQgYXQgYSBwYXJ0aWN1bGFyIG1vbWVudCBpbiB0aW1lLlxyXG4gKlxyXG4gKiAjIyMgVXNhZ2VcclxuICpcclxuICogYGBgXHJcbiAqIGNsYXNzIE15Q29tcG9uZW50IHtcclxuICogICBjb25zdHJ1Y3Rvcihyb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcclxuICogICAgIGNvbnN0IGlkOiBzdHJpbmcgPSByb3V0ZS5zbmFwc2hvdC5wYXJhbXMuaWQ7XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFjdGl2YXRlZFJvdXRlU25hcHNob3Qge1xyXG4gIC8qKlxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIF9yZXNvbHZlZENvbXBvbmVudEZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8YW55PjtcclxuXHJcbiAgLyoqIEBpbnRlcm5hbCAqKi9cclxuICBfcm91dGVDb25maWc6IFJvdXRlO1xyXG5cclxuICAvKiogQGludGVybmFsICoqL1xyXG4gIF91cmxTZWdtZW50OiBVcmxTZWdtZW50O1xyXG5cclxuICBfbGFzdFBhdGhJbmRleDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgICAgcHVibGljIHVybDogVXJsUGF0aFdpdGhQYXJhbXNbXSwgcHVibGljIHBhcmFtczogUGFyYW1zLCBwdWJsaWMgb3V0bGV0OiBzdHJpbmcsXHJcbiAgICAgIHB1YmxpYyBjb21wb25lbnQ6IFR5cGV8c3RyaW5nLCByb3V0ZUNvbmZpZzogUm91dGUsIHVybFNlZ21lbnQ6IFVybFNlZ21lbnQsXHJcbiAgICAgIGxhc3RQYXRoSW5kZXg6IG51bWJlcikge1xyXG4gICAgdGhpcy5fcm91dGVDb25maWcgPSByb3V0ZUNvbmZpZztcclxuICAgIHRoaXMuX3VybFNlZ21lbnQgPSB1cmxTZWdtZW50O1xyXG4gICAgdGhpcy5fbGFzdFBhdGhJbmRleCA9IGxhc3RQYXRoSW5kZXg7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgdXJsID0gdGhpcy51cmwubWFwKHMgPT4gcy50b1N0cmluZygpKS5qb2luKCcvJyk7XHJcbiAgICBjb25zdCBtYXRjaGVkID0gdGhpcy5fcm91dGVDb25maWcgPyB0aGlzLl9yb3V0ZUNvbmZpZy5wYXRoIDogJyc7XHJcbiAgICByZXR1cm4gYFJvdXRlKHVybDonJHt1cmx9JywgcGF0aDonJHttYXRjaGVkfScpYDtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgc3RhdGUgb2YgdGhlIHJvdXRlciBhdCBhIHBhcnRpY3VsYXIgbW9tZW50IGluIHRpbWUuXHJcbiAqXHJcbiAqICMjIyBVc2FnZVxyXG4gKlxyXG4gKiBgYGBcclxuICogY2xhc3MgTXlDb21wb25lbnQge1xyXG4gKiAgIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyKSB7XHJcbiAqICAgICBjb25zdCBzbmFwc2hvdCA9IHJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdDtcclxuICogICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUm91dGVyU3RhdGVTbmFwc2hvdCBleHRlbmRzIFRyZWU8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD4ge1xyXG4gIC8qKlxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgICBwdWJsaWMgdXJsOiBzdHJpbmcsIHJvb3Q6IFRyZWVOb2RlPEFjdGl2YXRlZFJvdXRlU25hcHNob3Q+LCBwdWJsaWMgcXVlcnlQYXJhbXM6IFBhcmFtcyxcclxuICAgICAgcHVibGljIGZyYWdtZW50OiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKHJvb3QpO1xyXG4gIH1cclxuXHJcbiAgdG9TdHJpbmcoKTogc3RyaW5nIHsgcmV0dXJuIHNlcmlhbGl6ZU5vZGUodGhpcy5fcm9vdCk7IH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2VyaWFsaXplTm9kZShub2RlOiBUcmVlTm9kZTxBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90Pik6IHN0cmluZyB7XHJcbiAgY29uc3QgYyA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IGAgeyAke25vZGUuY2hpbGRyZW4ubWFwKHNlcmlhbGl6ZU5vZGUpLmpvaW4oXCIsIFwiKX0gfSBgIDogJyc7XHJcbiAgcmV0dXJuIGAke25vZGUudmFsdWV9JHtjfWA7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGhlIGV4cGVjdGF0aW9uIGlzIHRoYXQgdGhlIGFjdGl2YXRlIHJvdXRlIGlzIGNyZWF0ZWQgd2l0aCB0aGUgcmlnaHQgc2V0IG9mIHBhcmFtZXRlcnMuXHJcbiAqIFNvIHdlIHB1c2ggbmV3IHZhbHVlcyBpbnRvIHRoZSBvYnNlcnZhYmxlcyBvbmx5IHdoZW4gdGhleSBhcmUgbm90IHRoZSBpbml0aWFsIHZhbHVlcy5cclxuICogQW5kIHdlIGRldGVjdCB0aGF0IGJ5IGNoZWNraW5nIGlmIHRoZSBzbmFwc2hvdCBmaWVsZCBpcyBzZXQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWR2YW5jZUFjdGl2YXRlZFJvdXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSk6IHZvaWQge1xyXG4gIGlmIChyb3V0ZS5zbmFwc2hvdCAmJiAhc2hhbGxvd0VxdWFsKHJvdXRlLnNuYXBzaG90LnBhcmFtcywgcm91dGUuX2Z1dHVyZVNuYXBzaG90LnBhcmFtcykpIHtcclxuICAgIHJvdXRlLnNuYXBzaG90ID0gcm91dGUuX2Z1dHVyZVNuYXBzaG90O1xyXG4gICAgKDxhbnk+cm91dGUudXJsKS5uZXh0KHJvdXRlLnNuYXBzaG90LnVybCk7XHJcbiAgICAoPGFueT5yb3V0ZS5wYXJhbXMpLm5leHQocm91dGUuc25hcHNob3QucGFyYW1zKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcm91dGUuc25hcHNob3QgPSByb3V0ZS5fZnV0dXJlU25hcHNob3Q7XHJcbiAgfVxyXG59Il19