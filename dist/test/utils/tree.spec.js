var tree_1 = require('../../src/utils/tree');
describe('tree', function () {
    it("should return the root of the tree", function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, []));
        expect(t.root).toEqual(1);
    });
    it("should return the parent of a node", function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.parent(1)).toEqual(null);
        expect(t.parent(2)).toEqual(1);
    });
    it("should return the children of a node", function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.children(1)).toEqual([2]);
        expect(t.children(2)).toEqual([]);
    });
    it("should return the first child of a node", function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.firstChild(1)).toEqual(2);
        expect(t.firstChild(2)).toEqual(null);
    });
    it("should return the siblings of a node", function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, []), new tree_1.TreeNode(3, [])]));
        expect(t.siblings(2)).toEqual([3]);
        expect(t.siblings(1)).toEqual([]);
    });
    it("should return the path to the root", function () {
        var t = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
        expect(t.pathFromRoot(2)).toEqual([1, 2]);
    });
    describe("contains", function () {
        it("should work", function () {
            var tree = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, []), new tree_1.TreeNode(3, [])]));
            var subtree1 = new tree_1.Tree(new tree_1.TreeNode(1, []));
            var subtree2 = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [])]));
            var subtree3 = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(3, [])]));
            var notSubtree1 = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(4, [])]));
            var notSubtree2 = new tree_1.Tree(new tree_1.TreeNode(1, [new tree_1.TreeNode(2, [new tree_1.TreeNode(4, [])])]));
            expect(tree.contains(subtree1)).toEqual(true);
            expect(tree.contains(subtree2)).toEqual(true);
            expect(tree.contains(subtree3)).toEqual(true);
            expect(tree.contains(notSubtree1)).toEqual(false);
            expect(tree.contains(notSubtree2)).toEqual(false);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC91dGlscy90cmVlLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUJBQTZCLHNCQUFzQixDQUFDLENBQUE7QUFFcEQsUUFBUSxDQUFDLE1BQU0sRUFBRTtJQUNmLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRTtRQUN2QyxJQUFNLENBQUMsR0FBRyxJQUFJLFdBQUksQ0FBTSxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRTtRQUN2QyxJQUFNLENBQUMsR0FBRyxJQUFJLFdBQUksQ0FBTSxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEYsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUU7UUFDekMsSUFBTSxDQUFDLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUM1QyxJQUFNLENBQUMsR0FBRyxJQUFJLFdBQUksQ0FBTSxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEYsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0NBQXNDLEVBQUU7UUFDekMsSUFBTSxDQUFDLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3RyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUU7UUFDdkMsSUFBTSxDQUFDLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ25CLEVBQUUsQ0FBQyxhQUFhLEVBQUU7WUFDaEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFJLENBQ25CLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxDQUFDLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkYsSUFBTSxRQUFRLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUQsSUFBTSxRQUFRLEdBQUcsSUFBSSxXQUFJLENBQU0sSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxlQUFRLENBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLElBQU0sUUFBUSxHQUFHLElBQUksV0FBSSxDQUFNLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxDQUFDLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RixJQUFNLFdBQVcsR0FBRyxJQUFJLFdBQUksQ0FBTSxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLGVBQVEsQ0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUYsSUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFJLENBQzFCLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxDQUFDLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxDQUFDLElBQUksZUFBUSxDQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFckYsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUcmVlLCBUcmVlTm9kZX0gZnJvbSAnLi4vLi4vc3JjL3V0aWxzL3RyZWUnO1xyXG5cclxuZGVzY3JpYmUoJ3RyZWUnLCAoKSA9PiB7XHJcbiAgaXQoXCJzaG91bGQgcmV0dXJuIHRoZSByb290IG9mIHRoZSB0cmVlXCIsICgpID0+IHtcclxuICAgIGNvbnN0IHQgPSBuZXcgVHJlZTxhbnk+KG5ldyBUcmVlTm9kZTxudW1iZXI+KDEsIFtdKSk7XHJcbiAgICBleHBlY3QodC5yb290KS50b0VxdWFsKDEpO1xyXG4gIH0pO1xyXG5cclxuICBpdChcInNob3VsZCByZXR1cm4gdGhlIHBhcmVudCBvZiBhIG5vZGVcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgdCA9IG5ldyBUcmVlPGFueT4obmV3IFRyZWVOb2RlPG51bWJlcj4oMSwgW25ldyBUcmVlTm9kZTxudW1iZXI+KDIsIFtdKV0pKTtcclxuICAgIGV4cGVjdCh0LnBhcmVudCgxKSkudG9FcXVhbChudWxsKTtcclxuICAgIGV4cGVjdCh0LnBhcmVudCgyKSkudG9FcXVhbCgxKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJzaG91bGQgcmV0dXJuIHRoZSBjaGlsZHJlbiBvZiBhIG5vZGVcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgdCA9IG5ldyBUcmVlPGFueT4obmV3IFRyZWVOb2RlPG51bWJlcj4oMSwgW25ldyBUcmVlTm9kZTxudW1iZXI+KDIsIFtdKV0pKTtcclxuICAgIGV4cGVjdCh0LmNoaWxkcmVuKDEpKS50b0VxdWFsKFsyXSk7XHJcbiAgICBleHBlY3QodC5jaGlsZHJlbigyKSkudG9FcXVhbChbXSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KFwic2hvdWxkIHJldHVybiB0aGUgZmlyc3QgY2hpbGQgb2YgYSBub2RlXCIsICgpID0+IHtcclxuICAgIGNvbnN0IHQgPSBuZXcgVHJlZTxhbnk+KG5ldyBUcmVlTm9kZTxudW1iZXI+KDEsIFtuZXcgVHJlZU5vZGU8bnVtYmVyPigyLCBbXSldKSk7XHJcbiAgICBleHBlY3QodC5maXJzdENoaWxkKDEpKS50b0VxdWFsKDIpO1xyXG4gICAgZXhwZWN0KHQuZmlyc3RDaGlsZCgyKSkudG9FcXVhbChudWxsKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJzaG91bGQgcmV0dXJuIHRoZSBzaWJsaW5ncyBvZiBhIG5vZGVcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgdCA9IG5ldyBUcmVlPGFueT4obmV3IFRyZWVOb2RlPG51bWJlcj4oMSwgW25ldyBUcmVlTm9kZTxudW1iZXI+KDIsIFtdKSwgbmV3IFRyZWVOb2RlPG51bWJlcj4oMywgW10pXSkpO1xyXG4gICAgZXhwZWN0KHQuc2libGluZ3MoMikpLnRvRXF1YWwoWzNdKTtcclxuICAgIGV4cGVjdCh0LnNpYmxpbmdzKDEpKS50b0VxdWFsKFtdKTtcclxuICB9KTtcclxuXHJcbiAgaXQoXCJzaG91bGQgcmV0dXJuIHRoZSBwYXRoIHRvIHRoZSByb290XCIsICgpID0+IHtcclxuICAgIGNvbnN0IHQgPSBuZXcgVHJlZTxhbnk+KG5ldyBUcmVlTm9kZTxudW1iZXI+KDEsIFtuZXcgVHJlZU5vZGU8bnVtYmVyPigyLCBbXSldKSk7XHJcbiAgICBleHBlY3QodC5wYXRoRnJvbVJvb3QoMikpLnRvRXF1YWwoWzEsIDJdKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoXCJjb250YWluc1wiLCAoKSA9PiB7XHJcbiAgICBpdChcInNob3VsZCB3b3JrXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgdHJlZSA9IG5ldyBUcmVlPGFueT4oXHJcbiAgICAgICAgbmV3IFRyZWVOb2RlPG51bWJlcj4oMSwgW25ldyBUcmVlTm9kZTxudW1iZXI+KDIsIFtdKSwgbmV3IFRyZWVOb2RlPG51bWJlcj4oMywgW10pXSkpO1xyXG4gICAgICBjb25zdCBzdWJ0cmVlMSA9IG5ldyBUcmVlPGFueT4obmV3IFRyZWVOb2RlPG51bWJlcj4oMSwgW10pKTtcclxuICAgICAgY29uc3Qgc3VidHJlZTIgPSBuZXcgVHJlZTxhbnk+KG5ldyBUcmVlTm9kZTxudW1iZXI+KDEsIFtuZXcgVHJlZU5vZGU8bnVtYmVyPigyLCBbXSldKSk7XHJcbiAgICAgIGNvbnN0IHN1YnRyZWUzID0gbmV3IFRyZWU8YW55PihuZXcgVHJlZU5vZGU8bnVtYmVyPigxLCBbbmV3IFRyZWVOb2RlPG51bWJlcj4oMywgW10pXSkpO1xyXG4gICAgICBjb25zdCBub3RTdWJ0cmVlMSA9IG5ldyBUcmVlPGFueT4obmV3IFRyZWVOb2RlPG51bWJlcj4oMSwgW25ldyBUcmVlTm9kZTxudW1iZXI+KDQsIFtdKV0pKTtcclxuICAgICAgY29uc3Qgbm90U3VidHJlZTIgPSBuZXcgVHJlZTxhbnk+KFxyXG4gICAgICAgIG5ldyBUcmVlTm9kZTxudW1iZXI+KDEsIFtuZXcgVHJlZU5vZGU8bnVtYmVyPigyLCBbbmV3IFRyZWVOb2RlPG51bWJlcj4oNCwgW10pXSldKSk7XHJcblxyXG4gICAgICBleHBlY3QodHJlZS5jb250YWlucyhzdWJ0cmVlMSkpLnRvRXF1YWwodHJ1ZSk7XHJcbiAgICAgIGV4cGVjdCh0cmVlLmNvbnRhaW5zKHN1YnRyZWUyKSkudG9FcXVhbCh0cnVlKTtcclxuICAgICAgZXhwZWN0KHRyZWUuY29udGFpbnMoc3VidHJlZTMpKS50b0VxdWFsKHRydWUpO1xyXG4gICAgICBleHBlY3QodHJlZS5jb250YWlucyhub3RTdWJ0cmVlMSkpLnRvRXF1YWwoZmFsc2UpO1xyXG4gICAgICBleHBlY3QodHJlZS5jb250YWlucyhub3RTdWJ0cmVlMikpLnRvRXF1YWwoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=