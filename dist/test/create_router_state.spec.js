var url_serializer_1 = require('../src/url_serializer');
var url_tree_1 = require('../src/url_tree');
var shared_1 = require('../src/shared');
var router_state_1 = require('../src/router_state');
var create_router_state_1 = require('../src/create_router_state');
var recognize_1 = require('../src/recognize');
describe('create router state', function () {
    var emptyState = function () { return router_state_1.createEmptyState(new url_tree_1.UrlTree(new url_tree_1.UrlSegment([], {}), {}, null), RootComponent); };
    it('should work create new state', function () {
        var state = create_router_state_1.createRouterState(createState([
            { path: 'a', component: ComponentA },
            { path: 'b', component: ComponentB, outlet: 'left' },
            { path: 'c', component: ComponentC, outlet: 'right' }
        ], "a(left:b//right:c)"), emptyState());
        checkActivatedRoute(state.root, RootComponent);
        var c = state.children(state.root);
        checkActivatedRoute(c[0], ComponentA);
        checkActivatedRoute(c[1], ComponentB, 'left');
        checkActivatedRoute(c[2], ComponentC, 'right');
    });
    it('should reuse existing nodes when it can', function () {
        var config = [
            { path: 'a', component: ComponentA },
            { path: 'b', component: ComponentB, outlet: 'left' },
            { path: 'c', component: ComponentC, outlet: 'left' }
        ];
        var prevState = create_router_state_1.createRouterState(createState(config, "a(left:b)"), emptyState());
        advanceState(prevState);
        var state = create_router_state_1.createRouterState(createState(config, "a(left:c)"), prevState);
        expect(prevState.root).toBe(state.root);
        var prevC = prevState.children(prevState.root);
        var currC = state.children(state.root);
        expect(prevC[0]).toBe(currC[0]);
        expect(prevC[1]).not.toBe(currC[1]);
        checkActivatedRoute(currC[1], ComponentC, 'left');
    });
    it('should handle componentless routes', function () {
        var config = [
            { path: 'a/:id', children: [
                    { path: 'b', component: ComponentA },
                    { path: 'c', component: ComponentB, outlet: 'right' }
                ] }
        ];
        var prevState = create_router_state_1.createRouterState(createState(config, "a/1;p=11/(b//right:c)"), emptyState());
        advanceState(prevState);
        var state = create_router_state_1.createRouterState(createState(config, "a/2;p=22/(b//right:c)"), prevState);
        expect(prevState.root).toBe(state.root);
        var prevP = prevState.firstChild(prevState.root);
        var currP = state.firstChild(state.root);
        expect(prevP).toBe(currP);
        var prevC = prevState.children(prevP);
        var currC = state.children(currP);
        expect(currP._futureSnapshot.params).toEqual({ id: '2', p: '22' });
        checkActivatedRoute(currC[0], ComponentA);
        checkActivatedRoute(currC[1], ComponentB, 'right');
    });
});
function advanceState(state) {
    advanceNode(state._root);
}
function advanceNode(node) {
    router_state_1.advanceActivatedRoute(node.value);
    node.children.forEach(advanceNode);
}
function createState(config, url) {
    var res;
    recognize_1.recognize(RootComponent, config, tree(url), url).forEach(function (s) { return res = s; });
    return res;
}
function checkActivatedRoute(actual, cmp, outlet) {
    if (outlet === void 0) { outlet = shared_1.PRIMARY_OUTLET; }
    if (actual === null) {
        expect(actual).toBeDefined();
    }
    else {
        expect(actual.component).toBe(cmp);
        expect(actual.outlet).toEqual(outlet);
    }
}
function tree(url) {
    return new url_serializer_1.DefaultUrlSerializer().parse(url);
}
var RootComponent = (function () {
    function RootComponent() {
    }
    return RootComponent;
})();
var ComponentA = (function () {
    function ComponentA() {
    }
    return ComponentA;
})();
var ComponentB = (function () {
    function ComponentB() {
    }
    return ComponentB;
})();
var ComponentC = (function () {
    function ComponentC() {
    }
    return ComponentC;
})();
//# sourceMappingURL=data:application/json;base64,