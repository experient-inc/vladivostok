var url_serializer_1 = require('../src/url_serializer');
var recognize_1 = require('../src/recognize');
var resolve_1 = require('../src/resolve');
describe('resolve', function () {
    it('should resolve components', function () {
        checkResolve([
            { path: 'a', component: "ComponentA" }
        ], "a", { ComponentA: 'ResolvedComponentA' }, function (resolved) {
            expect(resolved.firstChild(resolved.root)._resolvedComponentFactory).toEqual('ResolvedComponentA');
        });
    });
    it('should not resolve componentless routes', function () {
        checkResolve([
            { path: 'a', children: [] }
        ], "a", {}, function (resolved) {
            expect(resolved.firstChild(resolved.root)._resolvedComponentFactory).toEqual(null);
        });
    });
});
function checkResolve(config, url, resolved, callback) {
    var resolver = {
        resolveComponent: function (component) {
            if (resolved[component]) {
                return Promise.resolve(resolved[component]);
            }
            else {
                return Promise.reject("unknown component");
            }
        }
    };
    recognize_1.recognize(RootComponent, config, tree(url), url).mergeMap(function (s) { return resolve_1.resolve(resolver, s); }).subscribe(callback, function (e) {
        throw e;
    });
}
function tree(url) {
    return new url_serializer_1.DefaultUrlSerializer().parse(url);
}
var RootComponent = (function () {
    function RootComponent() {
    }
    return RootComponent;
})();
var ComponentA = (function () {
    function ComponentA() {
    }
    return ComponentA;
})();
var ComponentB = (function () {
    function ComponentB() {
    }
    return ComponentB;
})();
var ComponentC = (function () {
    function ComponentC() {
    }
    return ComponentC;
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9yZXNvbHZlLnNwZWMudHMiXSwibmFtZXMiOlsiY2hlY2tSZXNvbHZlIiwidHJlZSIsIlJvb3RDb21wb25lbnQiLCJSb290Q29tcG9uZW50LmNvbnN0cnVjdG9yIiwiQ29tcG9uZW50QSIsIkNvbXBvbmVudEEuY29uc3RydWN0b3IiLCJDb21wb25lbnRCIiwiQ29tcG9uZW50Qi5jb25zdHJ1Y3RvciIsIkNvbXBvbmVudEMiLCJDb21wb25lbnRDLmNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiQUFBQSwrQkFBbUMsdUJBQXVCLENBQUMsQ0FBQTtBQUczRCwwQkFBd0Isa0JBQWtCLENBQUMsQ0FBQTtBQUMzQyx3QkFBc0IsZ0JBQWdCLENBQUMsQ0FBQTtBQUd2QyxRQUFRLENBQUMsU0FBUyxFQUFFO0lBQ2xCLEVBQUUsQ0FBQywyQkFBMkIsRUFBRTtRQUM5QixZQUFZLENBQUM7WUFDWCxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBQztTQUNyQyxFQUFFLEdBQUcsRUFBRSxFQUFDLFVBQVUsRUFBRSxvQkFBb0IsRUFBQyxFQUFFLFVBQUMsUUFBNEI7WUFDdkUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDckcsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUM1QyxZQUFZLENBQUM7WUFDWCxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBQztTQUMxQixFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsVUFBQyxRQUE0QjtZQUN2QyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckYsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsc0JBQXNCLE1BQW9CLEVBQUUsR0FBVyxFQUFFLFFBQTZCLEVBQUUsUUFBYTtJQUNuR0EsSUFBTUEsUUFBUUEsR0FBR0E7UUFDZkEsZ0JBQWdCQSxFQUFFQSxVQUFDQSxTQUFnQkE7WUFDakNBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN4QkEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDOUNBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNOQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxtQkFBbUJBLENBQUNBLENBQUNBO1lBQzdDQSxDQUFDQTtRQUNIQSxDQUFDQTtLQUNGQSxDQUFDQTtJQUVGQSxxQkFBU0EsQ0FBQ0EsYUFBYUEsRUFBRUEsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsVUFBQUEsQ0FBQ0EsSUFBSUEsT0FBQUEsaUJBQU9BLENBQU1BLFFBQVFBLEVBQUVBLENBQUNBLENBQUNBLEVBQXpCQSxDQUF5QkEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsUUFBUUEsRUFBRUEsVUFBQUEsQ0FBQ0E7UUFDN0dBLE1BQU1BLENBQUNBLENBQUNBO0lBQ1ZBLENBQUNBLENBQUNBLENBQUNBO0FBQ0xBLENBQUNBO0FBRUQsY0FBYyxHQUFXO0lBQ3ZCQyxNQUFNQSxDQUFDQSxJQUFJQSxxQ0FBb0JBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0FBQy9DQSxDQUFDQTtBQUVEO0lBQUFDO0lBQXFCQyxDQUFDQTtJQUFERCxvQkFBQ0E7QUFBREEsQ0FBQ0EsQUFBdEIsSUFBc0I7QUFDdEI7SUFBQUU7SUFBa0JDLENBQUNBO0lBQURELGlCQUFDQTtBQUFEQSxDQUFDQSxBQUFuQixJQUFtQjtBQUNuQjtJQUFBRTtJQUFrQkMsQ0FBQ0E7SUFBREQsaUJBQUNBO0FBQURBLENBQUNBLEFBQW5CLElBQW1CO0FBQ25CO0lBQUFFO0lBQWtCQyxDQUFDQTtJQUFERCxpQkFBQ0E7QUFBREEsQ0FBQ0EsQUFBbkIsSUFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RlZmF1bHRVcmxTZXJpYWxpemVyfSBmcm9tICcuLi9zcmMvdXJsX3NlcmlhbGl6ZXInO1xyXG5pbXBvcnQge1VybFRyZWUsIFVybFNlZ21lbnR9IGZyb20gJy4uL3NyYy91cmxfdHJlZSc7XHJcbmltcG9ydCB7Um91dGVyU3RhdGVTbmFwc2hvdH0gZnJvbSAnLi4vc3JjL3JvdXRlcl9zdGF0ZSc7XHJcbmltcG9ydCB7cmVjb2duaXplfSBmcm9tICcuLi9zcmMvcmVjb2duaXplJztcclxuaW1wb3J0IHtyZXNvbHZlfSBmcm9tICcuLi9zcmMvcmVzb2x2ZSc7XHJcbmltcG9ydCB7Um91dGVyQ29uZmlnfSBmcm9tICcuLi9zcmMvY29uZmlnJztcclxuXHJcbmRlc2NyaWJlKCdyZXNvbHZlJywgKCkgPT4ge1xyXG4gIGl0KCdzaG91bGQgcmVzb2x2ZSBjb21wb25lbnRzJywgKCkgPT4ge1xyXG4gICAgY2hlY2tSZXNvbHZlKFtcclxuICAgICAge3BhdGg6ICdhJywgY29tcG9uZW50OiBcIkNvbXBvbmVudEFcIn1cclxuICAgIF0sIFwiYVwiLCB7Q29tcG9uZW50QTogJ1Jlc29sdmVkQ29tcG9uZW50QSd9LCAocmVzb2x2ZWQ6Um91dGVyU3RhdGVTbmFwc2hvdCkgPT4ge1xyXG4gICAgICBleHBlY3QocmVzb2x2ZWQuZmlyc3RDaGlsZChyZXNvbHZlZC5yb290KS5fcmVzb2x2ZWRDb21wb25lbnRGYWN0b3J5KS50b0VxdWFsKCdSZXNvbHZlZENvbXBvbmVudEEnKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIG5vdCByZXNvbHZlIGNvbXBvbmVudGxlc3Mgcm91dGVzJywgKCkgPT4ge1xyXG4gICAgY2hlY2tSZXNvbHZlKFtcclxuICAgICAge3BhdGg6ICdhJywgY2hpbGRyZW46IFtdfVxyXG4gICAgXSwgXCJhXCIsIHt9LCAocmVzb2x2ZWQ6Um91dGVyU3RhdGVTbmFwc2hvdCkgPT4ge1xyXG4gICAgICBleHBlY3QocmVzb2x2ZWQuZmlyc3RDaGlsZChyZXNvbHZlZC5yb290KS5fcmVzb2x2ZWRDb21wb25lbnRGYWN0b3J5KS50b0VxdWFsKG51bGwpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gY2hlY2tSZXNvbHZlKGNvbmZpZzogUm91dGVyQ29uZmlnLCB1cmw6IHN0cmluZywgcmVzb2x2ZWQ6IHtbazpzdHJpbmddOnN0cmluZ30sIGNhbGxiYWNrOiBhbnkpOiB2b2lkIHtcclxuICBjb25zdCByZXNvbHZlciA9IHtcclxuICAgIHJlc29sdmVDb21wb25lbnQ6IChjb21wb25lbnQ6c3RyaW5nKTpQcm9taXNlPGFueT4gPT4ge1xyXG4gICAgICBpZiAocmVzb2x2ZWRbY29tcG9uZW50XSkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzb2x2ZWRbY29tcG9uZW50XSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwidW5rbm93biBjb21wb25lbnRcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICByZWNvZ25pemUoUm9vdENvbXBvbmVudCwgY29uZmlnLCB0cmVlKHVybCksIHVybCkubWVyZ2VNYXAocyA9PiByZXNvbHZlKDxhbnk+cmVzb2x2ZXIsIHMpKS5zdWJzY3JpYmUoY2FsbGJhY2ssIGUgPT4ge1xyXG4gICAgdGhyb3cgZTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJlZSh1cmw6IHN0cmluZyk6IFVybFRyZWUge1xyXG4gIHJldHVybiBuZXcgRGVmYXVsdFVybFNlcmlhbGl6ZXIoKS5wYXJzZSh1cmwpO1xyXG59XHJcblxyXG5jbGFzcyBSb290Q29tcG9uZW50IHt9XHJcbmNsYXNzIENvbXBvbmVudEEge31cclxuY2xhc3MgQ29tcG9uZW50QiB7fVxyXG5jbGFzcyBDb21wb25lbnRDIHt9XHJcbiJdfQ==