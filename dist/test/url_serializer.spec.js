var url_serializer_1 = require('../src/url_serializer');
var shared_1 = require('../src/shared');
describe('url serializer', function () {
    var url = new url_serializer_1.DefaultUrlSerializer();
    it('should parse the root url', function () {
        var tree = url.parse("/");
        expectSegment(tree.root, "");
        expect(url.serialize(tree)).toEqual("/");
    });
    it('should parse non-empty urls', function () {
        var tree = url.parse("one/two");
        expectSegment(tree.root.children[shared_1.PRIMARY_OUTLET], "one/two");
        expect(url.serialize(tree)).toEqual("/one/two");
    });
    it("should parse multiple secondary segments", function () {
        var tree = url.parse("/one/two(left:three//right:four)");
        expectSegment(tree.root.children[shared_1.PRIMARY_OUTLET], "one/two");
        expectSegment(tree.root.children['left'], "three");
        expectSegment(tree.root.children['right'], "four");
        expect(url.serialize(tree)).toEqual("/one/two(left:three//right:four)");
    });
    it("should parse segments with empty paths", function () {
        var tree = url.parse("/one/two/(;a=1//right:;b=2)");
        var c = tree.root.children[shared_1.PRIMARY_OUTLET];
        expectSegment(tree.root.children[shared_1.PRIMARY_OUTLET], "one/two", true);
        expect(c.children[shared_1.PRIMARY_OUTLET].pathsWithParams[0].path).toEqual('');
        expect(c.children[shared_1.PRIMARY_OUTLET].pathsWithParams[0].parameters).toEqual({ a: '1' });
        expect(c.children['right'].pathsWithParams[0].path).toEqual('');
        expect(c.children['right'].pathsWithParams[0].parameters).toEqual({ b: '2' });
        expect(url.serialize(tree)).toEqual("/one/two/(;a=1//right:;b=2)");
    });
    it("should parse segments with empty paths (only aux)", function () {
        var tree = url.parse("/one/two/(right:;b=2)");
        var c = tree.root.children[shared_1.PRIMARY_OUTLET];
        expectSegment(tree.root.children[shared_1.PRIMARY_OUTLET], "one/two", true);
        expect(c.children['right'].pathsWithParams[0].path).toEqual('');
        expect(c.children['right'].pathsWithParams[0].parameters).toEqual({ b: '2' });
        expect(url.serialize(tree)).toEqual("/one/two/(right:;b=2)");
    });
    it("should parse scoped secondary segments", function () {
        var tree = url.parse("/one/(two//left:three)");
        var primary = tree.root.children[shared_1.PRIMARY_OUTLET];
        expectSegment(primary, "one", true);
        expectSegment(primary.children[shared_1.PRIMARY_OUTLET], "two");
        expectSegment(primary.children["left"], "three");
        expect(url.serialize(tree)).toEqual("/one/(two//left:three)");
    });
    it("should parse scoped secondary segments with unscoped ones", function () {
        var tree = url.parse("/one/(two//left:three)(right:four)");
        var primary = tree.root.children[shared_1.PRIMARY_OUTLET];
        expectSegment(primary, "one", true);
        expectSegment(primary.children[shared_1.PRIMARY_OUTLET], "two");
        expectSegment(primary.children["left"], "three");
        expectSegment(tree.root.children["right"], "four");
        expect(url.serialize(tree)).toEqual("/one/(two//left:three)(right:four)");
    });
    it("should parse secondary segments that have children", function () {
        var tree = url.parse("/one(left:two/three)");
        expectSegment(tree.root.children[shared_1.PRIMARY_OUTLET], "one");
        expectSegment(tree.root.children['left'], "two/three");
        expect(url.serialize(tree)).toEqual("/one(left:two/three)");
    });
    it("should parse an empty secondary segment group", function () {
        var tree = url.parse("/one()");
        expectSegment(tree.root.children[shared_1.PRIMARY_OUTLET], "one");
        expect(url.serialize(tree)).toEqual("/one");
    });
    it("should parse key-value matrix params", function () {
        var tree = url.parse("/one;a=11a;b=11b(left:two;c=22//right:three;d=33)");
        expectSegment(tree.root.children[shared_1.PRIMARY_OUTLET], "one;a=11a;b=11b");
        expectSegment(tree.root.children["left"], "two;c=22");
        expectSegment(tree.root.children["right"], "three;d=33");
        expect(url.serialize(tree)).toEqual("/one;a=11a;b=11b(left:two;c=22//right:three;d=33)");
    });
    it("should parse key only matrix params", function () {
        var tree = url.parse("/one;a");
        expectSegment(tree.root.children[shared_1.PRIMARY_OUTLET], "one;a=true");
        expect(url.serialize(tree)).toEqual("/one;a=true");
    });
    it("should parse query params", function () {
        var tree = url.parse("/one?a=1&b=2");
        expect(tree.queryParams).toEqual({ a: '1', b: '2' });
    });
    it("should parse query params when with parenthesis", function () {
        var tree = url.parse("/one?a=(11)&b=(22)");
        expect(tree.queryParams).toEqual({ a: '(11)', b: '(22)' });
    });
    it("should parse key only query params", function () {
        var tree = url.parse("/one?a");
        expect(tree.queryParams).toEqual({ a: 'true' });
    });
    it("should serializer query params", function () {
        var tree = url.parse("/one?a");
        expect(url.serialize(tree)).toEqual("/one?a=true");
    });
    it("should parse fragment", function () {
        var tree = url.parse("/one#two");
        expect(tree.fragment).toEqual("two");
        expect(url.serialize(tree)).toEqual("/one#two");
    });
    it("should parse empty fragment", function () {
        var tree = url.parse("/one#");
        expect(tree.fragment).toEqual("");
        expect(url.serialize(tree)).toEqual("/one#");
    });
});
function expectSegment(segment, expected, hasChildren) {
    if (hasChildren === void 0) { hasChildren = false; }
    var p = segment.pathsWithParams.map(function (p) { return url_serializer_1.serializePath(p); }).join("/");
    expect(p).toEqual(expected);
    expect(Object.keys(segment.children).length > 0).toEqual(hasChildren);
}
//# sourceMappingURL=data:application/json;base64,